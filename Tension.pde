int screen;
boolean seleccionjugador1 = false;
boolean seleccionjugador2 = false;
int turn;
int energia1;
int energia2;
int seleccionado;
int pv2seleccionado;

class Personajevirus {
  String nombre;
  int hp;
  int ataque;
  int tipo;
  int seleccionado;
  Personajevirus(String nombre_, int hp_, int ataque_, int tipo_) {
    nombre =nombre_;
    hp = hp_;
    ataque = ataque_;
    tipo = tipo_;
  }
  void display() {
    switch(tipo) {
     /////////////////////////////////////////////////////////////////////////////////////////////// 
    case 0:
      pushMatrix();
      rectMode(CENTER); 
      translate(300, 100);
      stroke(0);
      fill(0, 190, 135);
      ellipse(76, 76, 150, 150);
      fill(255, 255, 255);
      ellipse(75.7, 75.8, 130, 130);
      noStroke();
      fill(246, 227, 0);
      ellipse(75.8, 75.8, 50, 50);
beginShape();
vertex(131.1, 99.8);
vertex(114.8, 96.5);
vertex(114.7, 91.2);
vertex(125.3, 94.2);
vertex(125.5, 93.4);
vertex(114.6, 90.4);
vertex(114.6, 87.2);
vertex(125.7, 90.2);
vertex(125.9, 89.4);
vertex(114.5, 86.4);
vertex(114.4, 79.6);
vertex(128.1, 89.5);
vertex(128.6, 88.8);
vertex(114.4, 78.5);
vertex(114.1, 55.7);
vertex(121.3, 55.4);
vertex(121.3, 54.5);
vertex(114.2, 54.8);
vertex(114.2, 53.2);
vertex(119.2, 53.2);
vertex(119.2, 52.3);
vertex(114.1, 52.3);
vertex(114.1, 50.2);
vertex(129.4, 52.7);
vertex(129.5, 51.9);
vertex(114.1, 49.4);
vertex(114.1, 46.8);
vertex(113.2, 46.8);
vertex(113.2, 49.3);
vertex(107.8, 48.4);
vertex(110.6, 27.2);
vertex(109.8, 27.1);
vertex(107, 48.3);
vertex(94.4, 46.2);
vertex(109.1, 21.6);
vertex(108.4, 21.2);
vertex(93.5, 46.1);
vertex(73.6, 42.8);
vertex(80, 34.5);
vertex(82.6, 37.9);
vertex(83.3, 37.4);
vertex(80.5, 33.9);
vertex(82, 31.9);
vertex(84, 35.1);
vertex(84.7, 34.6);
vertex(82.5, 31.1);
vertex(84, 29.1);
vertex(83.3, 28.6);
vertex(82, 30.3);
vertex(79.3, 26);
vertex(78.6, 26.5);
vertex(81.4, 31);
vertex(80, 33.1);
vertex(77.3, 29.6);
vertex(76.6, 30.1);
vertex(79.4, 33.7);
vertex(72.6, 42.5);
vertex(66.9, 41.6);
vertex(69.1, 39.5);
vertex(68.5, 39);
vertex(65.8, 41.5);
vertex(63.1, 41.1);
vertex(41.7, 25.5);
vertex(41.2, 26.2);
vertex(61.2, 40.8);
vertex(30.2, 35.7);
vertex(30.1, 36.5);
vertex(62.8, 41.8);
vertex(64.3, 42.9);
vertex(39.3, 66.2);
vertex(34.6, 65);
vertex(35.2, 62.5);
vertex(34.4, 62.3);
vertex(33.8, 64.8);
vertex(22.8, 61.9);
vertex(26, 57.5);
vertex(25.3, 57);
vertex(21.9, 61.6);
vertex(20.7, 61.3);
vertex(22.9, 57.2);
vertex(22.1, 56.8);
vertex(19.8, 61);
vertex(16, 60);
vertex(15.8, 60.8);
vertex(19.4, 61.8);
vertex(18.4, 63.6);
vertex(15.5, 62.8);
vertex(15.3, 63.6);
vertex(18, 64.3);
vertex(15.5, 68.9);
vertex(16.3, 69.3);
vertex(18.9, 64.5);
vertex(19.6, 64.7);
vertex(17.3, 67.8);
vertex(18, 68.3);
vertex(20.5, 65);
vertex(33, 68.5);
vertex(32.2, 71.7);
vertex(33, 71.9);
vertex(33.8, 68.8);
vertex(36, 69.4);
vertex(26, 78.7);
vertex(13.1, 76.1);
vertex(13, 77);
vertex(25.3, 79.5);
vertex(21.4, 83.1);
vertex(22, 83.7);
vertex(26.4, 79.6);
vertex(42, 82.7);
vertex(36.5, 89.8);
vertex(24.3, 83.6);
vertex(23.9, 84.4);
vertex(36, 90.6);
vertex(34.7, 92.3);
vertex(22.7, 90.9);
vertex(22.6, 91.7);
vertex(34.1, 93);
vertex(29.6, 98.9);
vertex(30.3, 99.4);
vertex(35.1, 93.1);
vertex(42.9, 94);
vertex(56.1, 100.7);
vertex(46.1, 115);
vertex(43.9, 113.8);
vertex(48.3, 107.9);
vertex(47.6, 107.4);
vertex(43.2, 113.4);
vertex(39.9, 111.5);
vertex(39.5, 112.2);
vertex(42.7, 114);
vertex(39.4, 118.4);
vertex(32.1, 119.7);
vertex(32.2, 120.5);
vertex(38.6, 119.4);
vertex(34.9, 124.4);
vertex(35.6, 124.9);
vertex(39.8, 119.2);
vertex(43.6, 118.5);
vertex(38.5, 125.9);
vertex(39.2, 126.4);
vertex(44.8, 118.3);
vertex(49, 117.6);
vertex(50.3, 118.4);
vertex(45.4, 126.6);
vertex(46.1, 127);
vertex(51, 118.8);
vertex(62.2, 125.1);
vertex(62.6, 124.4);
vertex(51.5, 118);
vertex(52.1, 117);
vertex(64.7, 114.8);
vertex(64.6, 114);
vertex(52.8, 116.1);
vertex(60.5, 103.2);
vertex(92.2, 119.4);
vertex(87.5, 122.4);
vertex(88, 123.1);
vertex(92.5, 120.2);
vertex(92.2, 122.3);
vertex(88.6, 124.5);
vertex(89, 125.2);
vertex(92, 123.4);
vertex(91.6, 125.9);
vertex(91.7, 125.9);
vertex(90.1, 126.9);
vertex(90.6, 127.6);
vertex(94.7, 125);
vertex(94, 129.7);
vertex(94.8, 129.8);
vertex(95.6, 124.3);
vertex(97.2, 123.3);
vertex(95.8, 133.7);
vertex(96.6, 133.8);
vertex(98.1, 122.7);
vertex(98.4, 122.5);
vertex(105.2, 126);
vertex(105.6, 125.2);
vertex(99.2, 121.9);
vertex(105.8, 117.8);
vertex(105.3, 117.1);
vertex(98.3, 121.5);
vertex(98.2, 121.5);
vertex(98.5, 119.2);
vertex(104.5, 115.5);
vertex(104.1, 114.8);
vertex(98.7, 118.1);
vertex(99, 116);
vertex(102.9, 113.6);
vertex(102.4, 112.9);
vertex(99.1, 115);
vertex(101, 100.9);
vertex(114, 102.4);
vertex(114.1, 113.9);
vertex(115, 113.9);
vertex(114.9, 102.5);
vertex(121, 103.2);
vertex(121.1, 102.4);
vertex(114.9, 101.7);
vertex(114.8, 97.5);
vertex(131, 100.7);
vertex(131.1, 99.8);
endShape();
beginShape();
vertex(20, 64.1);
vertex(19.2, 63.9);
vertex(20.2, 62.1);
vertex(21.3, 62.4);
vertex(20, 64.1);
endShape();
beginShape();
vertex(33.1, 67.7);
vertex(20.9, 64.3);
vertex(22.2, 62.6);
vertex(33.6, 65.6);
vertex(33.1, 67.7);
endShape();
beginShape();
vertex(113.9, 96.4);
vertex(101.9, 94);
vertex(102.7, 88);
vertex(113.9, 91.1);
vertex(113.9, 96.4);
endShape();
beginShape();
vertex(75.2, 76.7);
vertex(73.8, 79);
vertex(50.7, 72.6);
vertex(52.2, 70.6);
vertex(75.2, 76.7);
endShape();
beginShape();
vertex(52.8, 69.9);
vertex(70.2, 47.3);
vertex(86, 58.7);
vertex(75.6, 76);
vertex(52.8, 69.9);
endShape();
beginShape();
vertex(74.2, 80.1);
vertex(97.9, 86.7);
vertex(96.9, 93);
vertex(69.8, 87.5);
vertex(74.2, 80.1);
endShape();
beginShape();
vertex(73.3, 79.8);
vertex(68.8, 87.3);
vertex(43.3, 82.2);
vertex(50.1, 73.4);
vertex(73.3, 79.8);
endShape();
beginShape();
vertex(69.3, 88.3);
vertex(96.8, 93.8);
vertex(95.9, 99.4);
vertex(64.9, 95.8);
vertex(69.3, 88.3);
endShape();
beginShape();
vertex(96.5, 100.4);
vertex(98.3, 100.6);
vertex(95.8, 117.1);
vertex(93.6, 118.5);
vertex(96.5, 100.4);
endShape();
beginShape();
vertex(96.7, 99.5);
vertex(97.6, 93.9);
vertex(99.3, 94.3);
vertex(98.5, 99.7);
vertex(96.7, 99.5);
endShape();
beginShape();
vertex(97.7, 93.1);
vertex(98.7, 86.8);
vertex(100.4, 87.3);
vertex(99.5, 93.4);
vertex(97.7, 93.1);
endShape();
beginShape();
vertex(98.9, 86);
vertex(99, 85.4);
vertex(98.2, 85.3);
vertex(98, 85.8);
vertex(74.6, 79.3);
vertex(76, 77);
vertex(100.9, 83.6);
vertex(100.5, 86.5);
vertex(98.9, 86);
endShape();
beginShape();
vertex(76.5, 76.2);
vertex(86.6, 59.3);
vertex(104, 71.8);
vertex(102.5, 83.1);
vertex(102, 83);
vertex(102.9, 77.3);
vertex(102.1, 77.2);
vertex(101.2, 82.8);
vertex(76.5, 76.2);
endShape();
beginShape();
vertex(101.8, 83.8);
vertex(102.4, 83.9);
vertex(102, 86.8);
vertex(101.4, 86.6);
vertex(101.8, 83.8);
endShape();
beginShape();
vertex(113.9, 90.2);
vertex(102.9, 87.1);
vertex(103.3, 84.2);
vertex(113.9, 87);
vertex(113.9, 90.2);
endShape();
beginShape();
vertex(113.8, 86.1);
vertex(103.3, 83.3);
vertex(104.7, 72.4);
vertex(113.7, 78.9);
vertex(113.8, 86.1);
endShape();
beginShape();
vertex(107.8, 49.3);
vertex(113.3, 50.2);
vertex(113.3, 52.4);
vertex(111.7, 52.4);
vertex(111.7, 53.3);
vertex(113.3, 53.3);
vertex(113.3, 55);
vertex(112.3, 55);
vertex(112.3, 55.9);
vertex(113.2, 55.9);
vertex(113.5, 78);
vertex(104.7, 71.6);
vertex(107.8, 49.3);
endShape();
beginShape();
vertex(94, 47);
vertex(107, 49.1);
vertex(104.1, 70.9);
vertex(87.1, 58.5);
vertex(94, 47);
endShape();
beginShape();
vertex(73, 43.6);
vertex(93, 46.9);
vertex(86.4, 58);
vertex(70.7, 46.6);
vertex(73, 43.6);
endShape();
beginShape();
vertex(66.1, 42.4);
vertex(72, 43.4);
vertex(70, 46.1);
vertex(65.6, 42.9);
vertex(66.1, 42.4);
endShape();
beginShape();
vertex(65.1, 42.3);
vertex(65, 42.4);
vertex(64.7, 42.2);
vertex(65.1, 42.3);
endShape();
beginShape();
vertex(65, 43.5);
vertex(69.5, 46.8);
vertex(51.9, 69.7);
vertex(40.3, 66.6);
vertex(65, 43.5);
endShape();
beginShape();
vertex(39.5, 67.2);
vertex(51.3, 70.3);
vertex(49.8, 72.3);
vertex(37.6, 69);
vertex(39.5, 67.2);
endShape();
beginShape();
vertex(33.9, 68);
vertex(34.4, 65.9);
vertex(38.5, 67);
vertex(36.6, 68.8);
vertex(33.9, 68);
endShape();
beginShape();
vertex(27, 78.9);
vertex(36.9, 69.7);
vertex(49.2, 73.1);
vertex(42.4, 82);
vertex(27, 78.9);
endShape();
beginShape();
vertex(35.5, 92.4);
vertex(36.6, 91);
vertex(40.5, 93);
vertex(35.5, 92.4);
endShape();
beginShape();
vertex(37.1, 90.3);
vertex(42.7, 83);
vertex(68.3, 88.2);
vertex(63.8, 95.8);
vertex(60.6, 95.4);
vertex(63.4, 91.4);
vertex(62.7, 90.9);
vertex(59.7, 95.3);
vertex(42.9, 93.3);
vertex(37.1, 90.3);
endShape();
beginShape();
vertex(45.1, 94.4);
vertex(59.1, 96);
vertex(56.3, 100.1);
vertex(45.1, 94.4);
endShape();
beginShape();
vertex(44.3, 117.5);
vertex(40.5, 118.2);
vertex(43.3, 114.4);
vertex(45.6, 115.7);
vertex(44.3, 117.5);
endShape();
beginShape();
vertex(45.5, 117.3);
vertex(46.3, 116.1);
vertex(47.8, 116.9);
vertex(45.5, 117.3);
endShape();
beginShape();
vertex(50.7, 117.6);
vertex(50.3, 117.3);
vertex(51, 117.2);
vertex(50.7, 117.6);
endShape();
beginShape();
vertex(51.5, 116.2);
vertex(49.1, 116.6);
vertex(46.8, 115.3);
vertex(56.6, 101.1);
vertex(59.6, 102.6);
vertex(51.5, 116.2);
endShape();
beginShape();
vertex(60.1, 102);
vertex(57.1, 100.5);
vertex(60.1, 96.1);
vertex(63.4, 96.5);
vertex(60.1, 102);
endShape();
beginShape();
vertex(60.8, 102.4);
vertex(64.3, 96.6);
vertex(95.7, 100.3);
vertex(92.7, 118.7);
vertex(60.8, 102.4);
endShape();
beginShape();
vertex(94.7, 120.7);
vertex(93.1, 121.7);
vertex(93.4, 120);
vertex(94.7, 120.7);
endShape();
beginShape();
vertex(94.8, 123.9);
vertex(92.5, 125.3);
vertex(92.9, 122.8);
vertex(95.2, 121.4);
vertex(94.8, 123.9);
endShape();
beginShape();
vertex(95.3, 120.1);
vertex(93.8, 119.3);
vertex(95.6, 118.2);
vertex(95.3, 120.1);
endShape();
beginShape();
vertex(97.3, 122.3);
vertex(95.7, 123.3);
vertex(96, 121.4);
vertex(97.3, 122.1);
vertex(97.3, 122.3);
endShape();
beginShape();
vertex(97.4, 121.2);
vertex(96.4, 120.7);
vertex(97.6, 119.9);
vertex(97.4, 121.2);
endShape();
beginShape();
vertex(97.8, 118.8);
vertex(96.3, 119.7);
vertex(96.6, 117.6);
vertex(98, 116.7);
vertex(97.8, 118.8);
endShape();
beginShape();
vertex(98.2, 115.6);
vertex(96.8, 116.5);
vertex(99.2, 100.7);
vertex(100.1, 100.8);
vertex(98.2, 115.6);
endShape();
beginShape();
vertex(100.2, 100);
vertex(99.3, 99.9);
vertex(100.1, 94.5);
vertex(100.9, 94.7);
vertex(100.2, 100);
endShape();
beginShape();
vertex(100.3, 93.6);
vertex(101.2, 87.5);
vertex(101.8, 87.7);
vertex(101, 93.8);
vertex(100.3, 93.6);
endShape();
beginShape();
vertex(101.1, 100.1);
vertex(101.8, 94.8);
vertex(114, 97.2);
vertex(114.1, 101.5);
vertex(101.1, 100.1);
endShape();
      popMatrix();
      break;
      /////////////////////////////////////////////////////////
    case 1:
      pushMatrix();
      rectMode(CENTER);
      translate(600, 100);
      noStroke();
fill(167, 109, 61);
beginShape();
vertex(32.1, 0);
vertex(0, 88.5);
vertex(151.7, 113.6);
endShape(CLOSE);
fill(255, 255, 0);
ellipse(35.2, 93.5, 31.3, 31.5);
fill(255, 255, 255);
ellipse(35.6, 93.9, 26.3, 26.4);
fill(3, 2, 1);
ellipse(35.5, 93.8, 8.6, 8.6);
ellipse(10.2, 119.6, 3.4, 3.4);
noFill();
stroke(0, 0, 0);
strokeWeight(2);
line(19.3, 108.5, 36.5, 131.7);
      popMatrix();
      break;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    case 2:
      pushMatrix();
      rectMode(CENTER);
      translate(900, 100);
noStroke();
fill(170, 15, 2);
beginShape();
vertex(70, 104.1);
vertex(60, 109.3);
vertex(0, 109.3);
vertex(59.6, 0);
vertex(59.6, 103.7);
endShape(CLOSE);
fill(0, 10, 30);
beginShape();
vertex(24.6, 169.3);
bezierVertex(24.6, 169.3, 38.4, 149.9, 66.5, 149.9);
bezierVertex(94.6, 149.9, 105.8, 168.5, 105.8, 168.5);
bezierVertex(105.8, 168.5, 100.2, 138.7, 66.1, 138.7);
bezierVertex(32, 138.7, 24.6, 169.3, 24.6, 169.3);
endShape();
fill(255, 103, 0);
beginShape();
vertex(22.5, 114);
vertex(111, 114);
vertex(66.1, 158.9);
endShape(CLOSE);
fill(2, 1, 3);
beginShape();
vertex(78.8, 97.2);
vertex(97.2, 97.2);
vertex(88.8, 112.9);
endShape(CLOSE);
fill(255, 190, 0);
rect(60.5, 87.2, 47.5, 4.1);
fill(217, 27, 2);
beginShape();
vertex(22, 40.6);
vertex(29.2, 25.3);
vertex(14.3, 18.8);
vertex(7.3, 33.5);
endShape(CLOSE);
      popMatrix();
      break;
      ///////////////////////////////////////////////////////////////////////////////////////
    case 3:
      pushMatrix();
      rectMode(CENTER);
      translate(450, 470);
noStroke();
fill(8, 23, 47);
beginShape();
vertex(48, 64);
vertex(24.3, 160.7);
vertex(70.3, 160.7);
endShape(CLOSE);
noFill();
stroke(213, 206, 160);
strokeWeight(6);
ellipse(47.5, 59.5, 28.2, 28.2);
fill(42, 42, 69);
noStroke();
beginShape();
vertex(6.3, 0);
vertex(91, 0);
vertex(48, 64);
vertex(6.3, 0);
endShape();
fill(0, 103, 141);
ellipse(47.7, 60, 17.3, 17.3);
noFill();
stroke(80, 178, 211);
strokeWeight(6);
ellipse(48, 59.7, 45, 45);
      popMatrix();
      break;
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    case 4:
      pushMatrix();
      rectMode(CENTER);
      translate(700, 470);
noStroke();
fill(35, 185, 205);
beginShape();
vertex(50.2, 32.1);
vertex(30.1, 52.5);
vertex(76.7, 138.3);
vertex(98.4, 130.8);
endShape(CLOSE);
fill(249, 30, 28);
ellipse(60.4, 81.6, 23.7, 23.7);
fill(255, 81, 32);
beginShape();
vertex(118.5, 81.6);
bezierVertex(118.5, 72.1, 110.8, 64.4, 101.3, 64.4);
bezierVertex(91.8, 64.4, 84.1, 72.1, 84.1, 81.6);
endShape();
beginShape();
vertex(36.6, 81.6);
bezierVertex(36.6, 72.1, 28.9, 64.4, 19.4, 64.4);
bezierVertex(9.9, 64.4, 2.3, 72.2, 2.3, 81.6);
endShape();
fill(253, 190, 0);
beginShape();
vertex(60.4, 81.6);
bezierVertex(60.4, 75.1, 55.1, 69.8, 48.6, 69.8);
bezierVertex(42.1, 69.8, 36.8, 75.1, 36.8, 81.6);
endShape();
beginShape();
vertex(84, 81.6);
bezierVertex(84, 75.1, 78.7, 69.8, 72.2, 69.8);
bezierVertex(65.7, 69.8, 60.4, 75.1, 60.4, 81.6);
endShape();
noFill();
stroke(234, 85, 74);
strokeWeight(9);
beginShape();
vertex(3.4, 42.9);
bezierVertex(16.5, 28.1, 35.7, 18.7, 57.1, 18.7);
bezierVertex(96.7, 18.7, 128.9, 50.8, 128.9, 90.5);
bezierVertex(128.9, 119.5, 111.7, 144.4, 87, 155.7);
endShape();
      popMatrix();
      break;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
  }
  void jugando(){
    
      switch(seleccionado){
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        case 0:
      pushMatrix();
      rectMode(CENTER);
      translate(400, 360);
      stroke(0);
      fill(0, 190, 135);
      ellipse(76, 76, 150, 150);
      fill(255, 255, 255);
      ellipse(75.7, 75.8, 130, 130);
      noStroke();
      fill(246, 227, 0);
      ellipse(75.8, 75.8, 50, 50);
beginShape();
vertex(131.1, 99.8);
vertex(114.8, 96.5);
vertex(114.7, 91.2);
vertex(125.3, 94.2);
vertex(125.5, 93.4);
vertex(114.6, 90.4);
vertex(114.6, 87.2);
vertex(125.7, 90.2);
vertex(125.9, 89.4);
vertex(114.5, 86.4);
vertex(114.4, 79.6);
vertex(128.1, 89.5);
vertex(128.6, 88.8);
vertex(114.4, 78.5);
vertex(114.1, 55.7);
vertex(121.3, 55.4);
vertex(121.3, 54.5);
vertex(114.2, 54.8);
vertex(114.2, 53.2);
vertex(119.2, 53.2);
vertex(119.2, 52.3);
vertex(114.1, 52.3);
vertex(114.1, 50.2);
vertex(129.4, 52.7);
vertex(129.5, 51.9);
vertex(114.1, 49.4);
vertex(114.1, 46.8);
vertex(113.2, 46.8);
vertex(113.2, 49.3);
vertex(107.8, 48.4);
vertex(110.6, 27.2);
vertex(109.8, 27.1);
vertex(107, 48.3);
vertex(94.4, 46.2);
vertex(109.1, 21.6);
vertex(108.4, 21.2);
vertex(93.5, 46.1);
vertex(73.6, 42.8);
vertex(80, 34.5);
vertex(82.6, 37.9);
vertex(83.3, 37.4);
vertex(80.5, 33.9);
vertex(82, 31.9);
vertex(84, 35.1);
vertex(84.7, 34.6);
vertex(82.5, 31.1);
vertex(84, 29.1);
vertex(83.3, 28.6);
vertex(82, 30.3);
vertex(79.3, 26);
vertex(78.6, 26.5);
vertex(81.4, 31);
vertex(80, 33.1);
vertex(77.3, 29.6);
vertex(76.6, 30.1);
vertex(79.4, 33.7);
vertex(72.6, 42.5);
vertex(66.9, 41.6);
vertex(69.1, 39.5);
vertex(68.5, 39);
vertex(65.8, 41.5);
vertex(63.1, 41.1);
vertex(41.7, 25.5);
vertex(41.2, 26.2);
vertex(61.2, 40.8);
vertex(30.2, 35.7);
vertex(30.1, 36.5);
vertex(62.8, 41.8);
vertex(64.3, 42.9);
vertex(39.3, 66.2);
vertex(34.6, 65);
vertex(35.2, 62.5);
vertex(34.4, 62.3);
vertex(33.8, 64.8);
vertex(22.8, 61.9);
vertex(26, 57.5);
vertex(25.3, 57);
vertex(21.9, 61.6);
vertex(20.7, 61.3);
vertex(22.9, 57.2);
vertex(22.1, 56.8);
vertex(19.8, 61);
vertex(16, 60);
vertex(15.8, 60.8);
vertex(19.4, 61.8);
vertex(18.4, 63.6);
vertex(15.5, 62.8);
vertex(15.3, 63.6);
vertex(18, 64.3);
vertex(15.5, 68.9);
vertex(16.3, 69.3);
vertex(18.9, 64.5);
vertex(19.6, 64.7);
vertex(17.3, 67.8);
vertex(18, 68.3);
vertex(20.5, 65);
vertex(33, 68.5);
vertex(32.2, 71.7);
vertex(33, 71.9);
vertex(33.8, 68.8);
vertex(36, 69.4);
vertex(26, 78.7);
vertex(13.1, 76.1);
vertex(13, 77);
vertex(25.3, 79.5);
vertex(21.4, 83.1);
vertex(22, 83.7);
vertex(26.4, 79.6);
vertex(42, 82.7);
vertex(36.5, 89.8);
vertex(24.3, 83.6);
vertex(23.9, 84.4);
vertex(36, 90.6);
vertex(34.7, 92.3);
vertex(22.7, 90.9);
vertex(22.6, 91.7);
vertex(34.1, 93);
vertex(29.6, 98.9);
vertex(30.3, 99.4);
vertex(35.1, 93.1);
vertex(42.9, 94);
vertex(56.1, 100.7);
vertex(46.1, 115);
vertex(43.9, 113.8);
vertex(48.3, 107.9);
vertex(47.6, 107.4);
vertex(43.2, 113.4);
vertex(39.9, 111.5);
vertex(39.5, 112.2);
vertex(42.7, 114);
vertex(39.4, 118.4);
vertex(32.1, 119.7);
vertex(32.2, 120.5);
vertex(38.6, 119.4);
vertex(34.9, 124.4);
vertex(35.6, 124.9);
vertex(39.8, 119.2);
vertex(43.6, 118.5);
vertex(38.5, 125.9);
vertex(39.2, 126.4);
vertex(44.8, 118.3);
vertex(49, 117.6);
vertex(50.3, 118.4);
vertex(45.4, 126.6);
vertex(46.1, 127);
vertex(51, 118.8);
vertex(62.2, 125.1);
vertex(62.6, 124.4);
vertex(51.5, 118);
vertex(52.1, 117);
vertex(64.7, 114.8);
vertex(64.6, 114);
vertex(52.8, 116.1);
vertex(60.5, 103.2);
vertex(92.2, 119.4);
vertex(87.5, 122.4);
vertex(88, 123.1);
vertex(92.5, 120.2);
vertex(92.2, 122.3);
vertex(88.6, 124.5);
vertex(89, 125.2);
vertex(92, 123.4);
vertex(91.6, 125.9);
vertex(91.7, 125.9);
vertex(90.1, 126.9);
vertex(90.6, 127.6);
vertex(94.7, 125);
vertex(94, 129.7);
vertex(94.8, 129.8);
vertex(95.6, 124.3);
vertex(97.2, 123.3);
vertex(95.8, 133.7);
vertex(96.6, 133.8);
vertex(98.1, 122.7);
vertex(98.4, 122.5);
vertex(105.2, 126);
vertex(105.6, 125.2);
vertex(99.2, 121.9);
vertex(105.8, 117.8);
vertex(105.3, 117.1);
vertex(98.3, 121.5);
vertex(98.2, 121.5);
vertex(98.5, 119.2);
vertex(104.5, 115.5);
vertex(104.1, 114.8);
vertex(98.7, 118.1);
vertex(99, 116);
vertex(102.9, 113.6);
vertex(102.4, 112.9);
vertex(99.1, 115);
vertex(101, 100.9);
vertex(114, 102.4);
vertex(114.1, 113.9);
vertex(115, 113.9);
vertex(114.9, 102.5);
vertex(121, 103.2);
vertex(121.1, 102.4);
vertex(114.9, 101.7);
vertex(114.8, 97.5);
vertex(131, 100.7);
vertex(131.1, 99.8);
endShape();
beginShape();
vertex(20, 64.1);
vertex(19.2, 63.9);
vertex(20.2, 62.1);
vertex(21.3, 62.4);
vertex(20, 64.1);
endShape();
beginShape();
vertex(33.1, 67.7);
vertex(20.9, 64.3);
vertex(22.2, 62.6);
vertex(33.6, 65.6);
vertex(33.1, 67.7);
endShape();
beginShape();
vertex(113.9, 96.4);
vertex(101.9, 94);
vertex(102.7, 88);
vertex(113.9, 91.1);
vertex(113.9, 96.4);
endShape();
beginShape();
vertex(75.2, 76.7);
vertex(73.8, 79);
vertex(50.7, 72.6);
vertex(52.2, 70.6);
vertex(75.2, 76.7);
endShape();
beginShape();
vertex(52.8, 69.9);
vertex(70.2, 47.3);
vertex(86, 58.7);
vertex(75.6, 76);
vertex(52.8, 69.9);
endShape();
beginShape();
vertex(74.2, 80.1);
vertex(97.9, 86.7);
vertex(96.9, 93);
vertex(69.8, 87.5);
vertex(74.2, 80.1);
endShape();
beginShape();
vertex(73.3, 79.8);
vertex(68.8, 87.3);
vertex(43.3, 82.2);
vertex(50.1, 73.4);
vertex(73.3, 79.8);
endShape();
beginShape();
vertex(69.3, 88.3);
vertex(96.8, 93.8);
vertex(95.9, 99.4);
vertex(64.9, 95.8);
vertex(69.3, 88.3);
endShape();
beginShape();
vertex(96.5, 100.4);
vertex(98.3, 100.6);
vertex(95.8, 117.1);
vertex(93.6, 118.5);
vertex(96.5, 100.4);
endShape();
beginShape();
vertex(96.7, 99.5);
vertex(97.6, 93.9);
vertex(99.3, 94.3);
vertex(98.5, 99.7);
vertex(96.7, 99.5);
endShape();
beginShape();
vertex(97.7, 93.1);
vertex(98.7, 86.8);
vertex(100.4, 87.3);
vertex(99.5, 93.4);
vertex(97.7, 93.1);
endShape();
beginShape();
vertex(98.9, 86);
vertex(99, 85.4);
vertex(98.2, 85.3);
vertex(98, 85.8);
vertex(74.6, 79.3);
vertex(76, 77);
vertex(100.9, 83.6);
vertex(100.5, 86.5);
vertex(98.9, 86);
endShape();
beginShape();
vertex(76.5, 76.2);
vertex(86.6, 59.3);
vertex(104, 71.8);
vertex(102.5, 83.1);
vertex(102, 83);
vertex(102.9, 77.3);
vertex(102.1, 77.2);
vertex(101.2, 82.8);
vertex(76.5, 76.2);
endShape();
beginShape();
vertex(101.8, 83.8);
vertex(102.4, 83.9);
vertex(102, 86.8);
vertex(101.4, 86.6);
vertex(101.8, 83.8);
endShape();
beginShape();
vertex(113.9, 90.2);
vertex(102.9, 87.1);
vertex(103.3, 84.2);
vertex(113.9, 87);
vertex(113.9, 90.2);
endShape();
beginShape();
vertex(113.8, 86.1);
vertex(103.3, 83.3);
vertex(104.7, 72.4);
vertex(113.7, 78.9);
vertex(113.8, 86.1);
endShape();
beginShape();
vertex(107.8, 49.3);
vertex(113.3, 50.2);
vertex(113.3, 52.4);
vertex(111.7, 52.4);
vertex(111.7, 53.3);
vertex(113.3, 53.3);
vertex(113.3, 55);
vertex(112.3, 55);
vertex(112.3, 55.9);
vertex(113.2, 55.9);
vertex(113.5, 78);
vertex(104.7, 71.6);
vertex(107.8, 49.3);
endShape();
beginShape();
vertex(94, 47);
vertex(107, 49.1);
vertex(104.1, 70.9);
vertex(87.1, 58.5);
vertex(94, 47);
endShape();
beginShape();
vertex(73, 43.6);
vertex(93, 46.9);
vertex(86.4, 58);
vertex(70.7, 46.6);
vertex(73, 43.6);
endShape();
beginShape();
vertex(66.1, 42.4);
vertex(72, 43.4);
vertex(70, 46.1);
vertex(65.6, 42.9);
vertex(66.1, 42.4);
endShape();
beginShape();
vertex(65.1, 42.3);
vertex(65, 42.4);
vertex(64.7, 42.2);
vertex(65.1, 42.3);
endShape();
beginShape();
vertex(65, 43.5);
vertex(69.5, 46.8);
vertex(51.9, 69.7);
vertex(40.3, 66.6);
vertex(65, 43.5);
endShape();
beginShape();
vertex(39.5, 67.2);
vertex(51.3, 70.3);
vertex(49.8, 72.3);
vertex(37.6, 69);
vertex(39.5, 67.2);
endShape();
beginShape();
vertex(33.9, 68);
vertex(34.4, 65.9);
vertex(38.5, 67);
vertex(36.6, 68.8);
vertex(33.9, 68);
endShape();
beginShape();
vertex(27, 78.9);
vertex(36.9, 69.7);
vertex(49.2, 73.1);
vertex(42.4, 82);
vertex(27, 78.9);
endShape();
beginShape();
vertex(35.5, 92.4);
vertex(36.6, 91);
vertex(40.5, 93);
vertex(35.5, 92.4);
endShape();
beginShape();
vertex(37.1, 90.3);
vertex(42.7, 83);
vertex(68.3, 88.2);
vertex(63.8, 95.8);
vertex(60.6, 95.4);
vertex(63.4, 91.4);
vertex(62.7, 90.9);
vertex(59.7, 95.3);
vertex(42.9, 93.3);
vertex(37.1, 90.3);
endShape();
beginShape();
vertex(45.1, 94.4);
vertex(59.1, 96);
vertex(56.3, 100.1);
vertex(45.1, 94.4);
endShape();
beginShape();
vertex(44.3, 117.5);
vertex(40.5, 118.2);
vertex(43.3, 114.4);
vertex(45.6, 115.7);
vertex(44.3, 117.5);
endShape();
beginShape();
vertex(45.5, 117.3);
vertex(46.3, 116.1);
vertex(47.8, 116.9);
vertex(45.5, 117.3);
endShape();
beginShape();
vertex(50.7, 117.6);
vertex(50.3, 117.3);
vertex(51, 117.2);
vertex(50.7, 117.6);
endShape();
beginShape();
vertex(51.5, 116.2);
vertex(49.1, 116.6);
vertex(46.8, 115.3);
vertex(56.6, 101.1);
vertex(59.6, 102.6);
vertex(51.5, 116.2);
endShape();
beginShape();
vertex(60.1, 102);
vertex(57.1, 100.5);
vertex(60.1, 96.1);
vertex(63.4, 96.5);
vertex(60.1, 102);
endShape();
beginShape();
vertex(60.8, 102.4);
vertex(64.3, 96.6);
vertex(95.7, 100.3);
vertex(92.7, 118.7);
vertex(60.8, 102.4);
endShape();
beginShape();
vertex(94.7, 120.7);
vertex(93.1, 121.7);
vertex(93.4, 120);
vertex(94.7, 120.7);
endShape();
beginShape();
vertex(94.8, 123.9);
vertex(92.5, 125.3);
vertex(92.9, 122.8);
vertex(95.2, 121.4);
vertex(94.8, 123.9);
endShape();
beginShape();
vertex(95.3, 120.1);
vertex(93.8, 119.3);
vertex(95.6, 118.2);
vertex(95.3, 120.1);
endShape();
beginShape();
vertex(97.3, 122.3);
vertex(95.7, 123.3);
vertex(96, 121.4);
vertex(97.3, 122.1);
vertex(97.3, 122.3);
endShape();
beginShape();
vertex(97.4, 121.2);
vertex(96.4, 120.7);
vertex(97.6, 119.9);
vertex(97.4, 121.2);
endShape();
beginShape();
vertex(97.8, 118.8);
vertex(96.3, 119.7);
vertex(96.6, 117.6);
vertex(98, 116.7);
vertex(97.8, 118.8);
endShape();
beginShape();
vertex(98.2, 115.6);
vertex(96.8, 116.5);
vertex(99.2, 100.7);
vertex(100.1, 100.8);
vertex(98.2, 115.6);
endShape();
beginShape();
vertex(100.2, 100);
vertex(99.3, 99.9);
vertex(100.1, 94.5);
vertex(100.9, 94.7);
vertex(100.2, 100);
endShape();
beginShape();
vertex(100.3, 93.6);
vertex(101.2, 87.5);
vertex(101.8, 87.7);
vertex(101, 93.8);
vertex(100.3, 93.6);
endShape();
beginShape();
vertex(101.1, 100.1);
vertex(101.8, 94.8);
vertex(114, 97.2);
vertex(114.1, 101.5);
vertex(101.1, 100.1);
endShape();
      popMatrix();
      break;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 1:
      pushMatrix();
      rectMode(CENTER);
      translate(420, 360);
      noStroke();
fill(167, 109, 61);
beginShape();
vertex(32.1, 0);
vertex(0, 88.5);
vertex(151.7, 113.6);
endShape(CLOSE);
fill(255, 255, 0);
ellipse(35.2, 93.5, 31.3, 31.5);
fill(255, 255, 255);
ellipse(35.6, 93.9, 26.3, 26.4);
fill(3, 2, 1);
ellipse(35.5, 93.8, 8.6, 8.6);
ellipse(10.2, 119.6, 3.4, 3.4);
noFill();
stroke(0, 0, 0);
strokeWeight(2);
line(19.3, 108.5, 36.5, 131.7);
      popMatrix();
      break;
      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 2:
      pushMatrix();
      rectMode(CENTER);
      translate(420, 360);
      noStroke();
fill(170, 15, 2);
beginShape();
vertex(70, 104.1);
vertex(60, 109.3);
vertex(0, 109.3);
vertex(59.6, 0);
vertex(59.6, 103.7);
endShape(CLOSE);
fill(0, 10, 30);
beginShape();
vertex(24.6, 169.3);
bezierVertex(24.6, 169.3, 38.4, 149.9, 66.5, 149.9);
bezierVertex(94.6, 149.9, 105.8, 168.5, 105.8, 168.5);
bezierVertex(105.8, 168.5, 100.2, 138.7, 66.1, 138.7);
bezierVertex(32, 138.7, 24.6, 169.3, 24.6, 169.3);
endShape();
fill(255, 103, 0);
beginShape();
vertex(22.5, 114);
vertex(111, 114);
vertex(66.1, 158.9);
endShape(CLOSE);
fill(2, 1, 3);
beginShape();
vertex(78.8, 97.2);
vertex(97.2, 97.2);
vertex(88.8, 112.9);
endShape(CLOSE);
fill(255, 190, 0);
rect(60.5, 87.2, 47.5, 4.1);
fill(217, 27, 2);
beginShape();
vertex(22, 40.6);
vertex(29.2, 25.3);
vertex(14.3, 18.8);
vertex(7.3, 33.5);
endShape(CLOSE);
      popMatrix();
      break;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 3:
      pushMatrix();
      rectMode(CENTER);
      translate(420, 360);
      noStroke();
fill(8, 23, 47);
beginShape();
vertex(48, 64);
vertex(24.3, 160.7);
vertex(70.3, 160.7);
endShape(CLOSE);
noFill();
stroke(213, 206, 160);
strokeWeight(6);
ellipse(47.5, 59.5, 28.2, 28.2);
fill(42, 42, 69);
noStroke();
beginShape();
vertex(6.3, 0);
vertex(91, 0);
vertex(48, 64);
vertex(6.3, 0);
endShape();
fill(0, 103, 141);
ellipse(47.7, 60, 17.3, 17.3);
noFill();
stroke(80, 178, 211);
strokeWeight(6);
ellipse(48, 59.7, 45, 45);
      popMatrix();
      break;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 4:
      pushMatrix();
      rectMode(CENTER);
      translate(420, 360);
      noStroke();
fill(35, 185, 205);
beginShape();
vertex(50.2, 32.1);
vertex(30.1, 52.5);
vertex(76.7, 138.3);
vertex(98.4, 130.8);
endShape(CLOSE);
fill(249, 30, 28);
ellipse(60.4, 81.6, 23.7, 23.7);
fill(255, 81, 32);
beginShape();
vertex(118.5, 81.6);
bezierVertex(118.5, 72.1, 110.8, 64.4, 101.3, 64.4);
bezierVertex(91.8, 64.4, 84.1, 72.1, 84.1, 81.6);
endShape();
beginShape();
vertex(36.6, 81.6);
bezierVertex(36.6, 72.1, 28.9, 64.4, 19.4, 64.4);
bezierVertex(9.9, 64.4, 2.3, 72.2, 2.3, 81.6);
endShape();
fill(253, 190, 0);
beginShape();
vertex(60.4, 81.6);
bezierVertex(60.4, 75.1, 55.1, 69.8, 48.6, 69.8);
bezierVertex(42.1, 69.8, 36.8, 75.1, 36.8, 81.6);
endShape();
beginShape();
vertex(84, 81.6);
bezierVertex(84, 75.1, 78.7, 69.8, 72.2, 69.8);
bezierVertex(65.7, 69.8, 60.4, 75.1, 60.4, 81.6);
endShape();
noFill();
stroke(234, 85, 74);
strokeWeight(9);
beginShape();
vertex(3.4, 42.9);
bezierVertex(16.5, 28.1, 35.7, 18.7, 57.1, 18.7);
bezierVertex(96.7, 18.7, 128.9, 50.8, 128.9, 90.5);
bezierVertex(128.9, 119.5, 111.7, 144.4, 87, 155.7);
endShape();
      popMatrix();
      break;
      }
    
  }
  
  void pv2jugando(){
    
      switch(pv2seleccionado){
        case 0:
      pushMatrix();
      rectMode(CENTER);
      translate(750, 360);
      stroke(0);
      fill(0, 190, 135);
      ellipse(76, 76, 150, 150);
      fill(255, 255, 255);
      ellipse(75.7, 75.8, 130, 130);
      noStroke();
      fill(246, 227, 0);
      ellipse(75.8, 75.8, 50, 50);
beginShape();
vertex(131.1, 99.8);
vertex(114.8, 96.5);
vertex(114.7, 91.2);
vertex(125.3, 94.2);
vertex(125.5, 93.4);
vertex(114.6, 90.4);
vertex(114.6, 87.2);
vertex(125.7, 90.2);
vertex(125.9, 89.4);
vertex(114.5, 86.4);
vertex(114.4, 79.6);
vertex(128.1, 89.5);
vertex(128.6, 88.8);
vertex(114.4, 78.5);
vertex(114.1, 55.7);
vertex(121.3, 55.4);
vertex(121.3, 54.5);
vertex(114.2, 54.8);
vertex(114.2, 53.2);
vertex(119.2, 53.2);
vertex(119.2, 52.3);
vertex(114.1, 52.3);
vertex(114.1, 50.2);
vertex(129.4, 52.7);
vertex(129.5, 51.9);
vertex(114.1, 49.4);
vertex(114.1, 46.8);
vertex(113.2, 46.8);
vertex(113.2, 49.3);
vertex(107.8, 48.4);
vertex(110.6, 27.2);
vertex(109.8, 27.1);
vertex(107, 48.3);
vertex(94.4, 46.2);
vertex(109.1, 21.6);
vertex(108.4, 21.2);
vertex(93.5, 46.1);
vertex(73.6, 42.8);
vertex(80, 34.5);
vertex(82.6, 37.9);
vertex(83.3, 37.4);
vertex(80.5, 33.9);
vertex(82, 31.9);
vertex(84, 35.1);
vertex(84.7, 34.6);
vertex(82.5, 31.1);
vertex(84, 29.1);
vertex(83.3, 28.6);
vertex(82, 30.3);
vertex(79.3, 26);
vertex(78.6, 26.5);
vertex(81.4, 31);
vertex(80, 33.1);
vertex(77.3, 29.6);
vertex(76.6, 30.1);
vertex(79.4, 33.7);
vertex(72.6, 42.5);
vertex(66.9, 41.6);
vertex(69.1, 39.5);
vertex(68.5, 39);
vertex(65.8, 41.5);
vertex(63.1, 41.1);
vertex(41.7, 25.5);
vertex(41.2, 26.2);
vertex(61.2, 40.8);
vertex(30.2, 35.7);
vertex(30.1, 36.5);
vertex(62.8, 41.8);
vertex(64.3, 42.9);
vertex(39.3, 66.2);
vertex(34.6, 65);
vertex(35.2, 62.5);
vertex(34.4, 62.3);
vertex(33.8, 64.8);
vertex(22.8, 61.9);
vertex(26, 57.5);
vertex(25.3, 57);
vertex(21.9, 61.6);
vertex(20.7, 61.3);
vertex(22.9, 57.2);
vertex(22.1, 56.8);
vertex(19.8, 61);
vertex(16, 60);
vertex(15.8, 60.8);
vertex(19.4, 61.8);
vertex(18.4, 63.6);
vertex(15.5, 62.8);
vertex(15.3, 63.6);
vertex(18, 64.3);
vertex(15.5, 68.9);
vertex(16.3, 69.3);
vertex(18.9, 64.5);
vertex(19.6, 64.7);
vertex(17.3, 67.8);
vertex(18, 68.3);
vertex(20.5, 65);
vertex(33, 68.5);
vertex(32.2, 71.7);
vertex(33, 71.9);
vertex(33.8, 68.8);
vertex(36, 69.4);
vertex(26, 78.7);
vertex(13.1, 76.1);
vertex(13, 77);
vertex(25.3, 79.5);
vertex(21.4, 83.1);
vertex(22, 83.7);
vertex(26.4, 79.6);
vertex(42, 82.7);
vertex(36.5, 89.8);
vertex(24.3, 83.6);
vertex(23.9, 84.4);
vertex(36, 90.6);
vertex(34.7, 92.3);
vertex(22.7, 90.9);
vertex(22.6, 91.7);
vertex(34.1, 93);
vertex(29.6, 98.9);
vertex(30.3, 99.4);
vertex(35.1, 93.1);
vertex(42.9, 94);
vertex(56.1, 100.7);
vertex(46.1, 115);
vertex(43.9, 113.8);
vertex(48.3, 107.9);
vertex(47.6, 107.4);
vertex(43.2, 113.4);
vertex(39.9, 111.5);
vertex(39.5, 112.2);
vertex(42.7, 114);
vertex(39.4, 118.4);
vertex(32.1, 119.7);
vertex(32.2, 120.5);
vertex(38.6, 119.4);
vertex(34.9, 124.4);
vertex(35.6, 124.9);
vertex(39.8, 119.2);
vertex(43.6, 118.5);
vertex(38.5, 125.9);
vertex(39.2, 126.4);
vertex(44.8, 118.3);
vertex(49, 117.6);
vertex(50.3, 118.4);
vertex(45.4, 126.6);
vertex(46.1, 127);
vertex(51, 118.8);
vertex(62.2, 125.1);
vertex(62.6, 124.4);
vertex(51.5, 118);
vertex(52.1, 117);
vertex(64.7, 114.8);
vertex(64.6, 114);
vertex(52.8, 116.1);
vertex(60.5, 103.2);
vertex(92.2, 119.4);
vertex(87.5, 122.4);
vertex(88, 123.1);
vertex(92.5, 120.2);
vertex(92.2, 122.3);
vertex(88.6, 124.5);
vertex(89, 125.2);
vertex(92, 123.4);
vertex(91.6, 125.9);
vertex(91.7, 125.9);
vertex(90.1, 126.9);
vertex(90.6, 127.6);
vertex(94.7, 125);
vertex(94, 129.7);
vertex(94.8, 129.8);
vertex(95.6, 124.3);
vertex(97.2, 123.3);
vertex(95.8, 133.7);
vertex(96.6, 133.8);
vertex(98.1, 122.7);
vertex(98.4, 122.5);
vertex(105.2, 126);
vertex(105.6, 125.2);
vertex(99.2, 121.9);
vertex(105.8, 117.8);
vertex(105.3, 117.1);
vertex(98.3, 121.5);
vertex(98.2, 121.5);
vertex(98.5, 119.2);
vertex(104.5, 115.5);
vertex(104.1, 114.8);
vertex(98.7, 118.1);
vertex(99, 116);
vertex(102.9, 113.6);
vertex(102.4, 112.9);
vertex(99.1, 115);
vertex(101, 100.9);
vertex(114, 102.4);
vertex(114.1, 113.9);
vertex(115, 113.9);
vertex(114.9, 102.5);
vertex(121, 103.2);
vertex(121.1, 102.4);
vertex(114.9, 101.7);
vertex(114.8, 97.5);
vertex(131, 100.7);
vertex(131.1, 99.8);
endShape();
beginShape();
vertex(20, 64.1);
vertex(19.2, 63.9);
vertex(20.2, 62.1);
vertex(21.3, 62.4);
vertex(20, 64.1);
endShape();
beginShape();
vertex(33.1, 67.7);
vertex(20.9, 64.3);
vertex(22.2, 62.6);
vertex(33.6, 65.6);
vertex(33.1, 67.7);
endShape();
beginShape();
vertex(113.9, 96.4);
vertex(101.9, 94);
vertex(102.7, 88);
vertex(113.9, 91.1);
vertex(113.9, 96.4);
endShape();
beginShape();
vertex(75.2, 76.7);
vertex(73.8, 79);
vertex(50.7, 72.6);
vertex(52.2, 70.6);
vertex(75.2, 76.7);
endShape();
beginShape();
vertex(52.8, 69.9);
vertex(70.2, 47.3);
vertex(86, 58.7);
vertex(75.6, 76);
vertex(52.8, 69.9);
endShape();
beginShape();
vertex(74.2, 80.1);
vertex(97.9, 86.7);
vertex(96.9, 93);
vertex(69.8, 87.5);
vertex(74.2, 80.1);
endShape();
beginShape();
vertex(73.3, 79.8);
vertex(68.8, 87.3);
vertex(43.3, 82.2);
vertex(50.1, 73.4);
vertex(73.3, 79.8);
endShape();
beginShape();
vertex(69.3, 88.3);
vertex(96.8, 93.8);
vertex(95.9, 99.4);
vertex(64.9, 95.8);
vertex(69.3, 88.3);
endShape();
beginShape();
vertex(96.5, 100.4);
vertex(98.3, 100.6);
vertex(95.8, 117.1);
vertex(93.6, 118.5);
vertex(96.5, 100.4);
endShape();
beginShape();
vertex(96.7, 99.5);
vertex(97.6, 93.9);
vertex(99.3, 94.3);
vertex(98.5, 99.7);
vertex(96.7, 99.5);
endShape();
beginShape();
vertex(97.7, 93.1);
vertex(98.7, 86.8);
vertex(100.4, 87.3);
vertex(99.5, 93.4);
vertex(97.7, 93.1);
endShape();
beginShape();
vertex(98.9, 86);
vertex(99, 85.4);
vertex(98.2, 85.3);
vertex(98, 85.8);
vertex(74.6, 79.3);
vertex(76, 77);
vertex(100.9, 83.6);
vertex(100.5, 86.5);
vertex(98.9, 86);
endShape();
beginShape();
vertex(76.5, 76.2);
vertex(86.6, 59.3);
vertex(104, 71.8);
vertex(102.5, 83.1);
vertex(102, 83);
vertex(102.9, 77.3);
vertex(102.1, 77.2);
vertex(101.2, 82.8);
vertex(76.5, 76.2);
endShape();
beginShape();
vertex(101.8, 83.8);
vertex(102.4, 83.9);
vertex(102, 86.8);
vertex(101.4, 86.6);
vertex(101.8, 83.8);
endShape();
beginShape();
vertex(113.9, 90.2);
vertex(102.9, 87.1);
vertex(103.3, 84.2);
vertex(113.9, 87);
vertex(113.9, 90.2);
endShape();
beginShape();
vertex(113.8, 86.1);
vertex(103.3, 83.3);
vertex(104.7, 72.4);
vertex(113.7, 78.9);
vertex(113.8, 86.1);
endShape();
beginShape();
vertex(107.8, 49.3);
vertex(113.3, 50.2);
vertex(113.3, 52.4);
vertex(111.7, 52.4);
vertex(111.7, 53.3);
vertex(113.3, 53.3);
vertex(113.3, 55);
vertex(112.3, 55);
vertex(112.3, 55.9);
vertex(113.2, 55.9);
vertex(113.5, 78);
vertex(104.7, 71.6);
vertex(107.8, 49.3);
endShape();
beginShape();
vertex(94, 47);
vertex(107, 49.1);
vertex(104.1, 70.9);
vertex(87.1, 58.5);
vertex(94, 47);
endShape();
beginShape();
vertex(73, 43.6);
vertex(93, 46.9);
vertex(86.4, 58);
vertex(70.7, 46.6);
vertex(73, 43.6);
endShape();
beginShape();
vertex(66.1, 42.4);
vertex(72, 43.4);
vertex(70, 46.1);
vertex(65.6, 42.9);
vertex(66.1, 42.4);
endShape();
beginShape();
vertex(65.1, 42.3);
vertex(65, 42.4);
vertex(64.7, 42.2);
vertex(65.1, 42.3);
endShape();
beginShape();
vertex(65, 43.5);
vertex(69.5, 46.8);
vertex(51.9, 69.7);
vertex(40.3, 66.6);
vertex(65, 43.5);
endShape();
beginShape();
vertex(39.5, 67.2);
vertex(51.3, 70.3);
vertex(49.8, 72.3);
vertex(37.6, 69);
vertex(39.5, 67.2);
endShape();
beginShape();
vertex(33.9, 68);
vertex(34.4, 65.9);
vertex(38.5, 67);
vertex(36.6, 68.8);
vertex(33.9, 68);
endShape();
beginShape();
vertex(27, 78.9);
vertex(36.9, 69.7);
vertex(49.2, 73.1);
vertex(42.4, 82);
vertex(27, 78.9);
endShape();
beginShape();
vertex(35.5, 92.4);
vertex(36.6, 91);
vertex(40.5, 93);
vertex(35.5, 92.4);
endShape();
beginShape();
vertex(37.1, 90.3);
vertex(42.7, 83);
vertex(68.3, 88.2);
vertex(63.8, 95.8);
vertex(60.6, 95.4);
vertex(63.4, 91.4);
vertex(62.7, 90.9);
vertex(59.7, 95.3);
vertex(42.9, 93.3);
vertex(37.1, 90.3);
endShape();
beginShape();
vertex(45.1, 94.4);
vertex(59.1, 96);
vertex(56.3, 100.1);
vertex(45.1, 94.4);
endShape();
beginShape();
vertex(44.3, 117.5);
vertex(40.5, 118.2);
vertex(43.3, 114.4);
vertex(45.6, 115.7);
vertex(44.3, 117.5);
endShape();
beginShape();
vertex(45.5, 117.3);
vertex(46.3, 116.1);
vertex(47.8, 116.9);
vertex(45.5, 117.3);
endShape();
beginShape();
vertex(50.7, 117.6);
vertex(50.3, 117.3);
vertex(51, 117.2);
vertex(50.7, 117.6);
endShape();
beginShape();
vertex(51.5, 116.2);
vertex(49.1, 116.6);
vertex(46.8, 115.3);
vertex(56.6, 101.1);
vertex(59.6, 102.6);
vertex(51.5, 116.2);
endShape();
beginShape();
vertex(60.1, 102);
vertex(57.1, 100.5);
vertex(60.1, 96.1);
vertex(63.4, 96.5);
vertex(60.1, 102);
endShape();
beginShape();
vertex(60.8, 102.4);
vertex(64.3, 96.6);
vertex(95.7, 100.3);
vertex(92.7, 118.7);
vertex(60.8, 102.4);
endShape();
beginShape();
vertex(94.7, 120.7);
vertex(93.1, 121.7);
vertex(93.4, 120);
vertex(94.7, 120.7);
endShape();
beginShape();
vertex(94.8, 123.9);
vertex(92.5, 125.3);
vertex(92.9, 122.8);
vertex(95.2, 121.4);
vertex(94.8, 123.9);
endShape();
beginShape();
vertex(95.3, 120.1);
vertex(93.8, 119.3);
vertex(95.6, 118.2);
vertex(95.3, 120.1);
endShape();
beginShape();
vertex(97.3, 122.3);
vertex(95.7, 123.3);
vertex(96, 121.4);
vertex(97.3, 122.1);
vertex(97.3, 122.3);
endShape();
beginShape();
vertex(97.4, 121.2);
vertex(96.4, 120.7);
vertex(97.6, 119.9);
vertex(97.4, 121.2);
endShape();
beginShape();
vertex(97.8, 118.8);
vertex(96.3, 119.7);
vertex(96.6, 117.6);
vertex(98, 116.7);
vertex(97.8, 118.8);
endShape();
beginShape();
vertex(98.2, 115.6);
vertex(96.8, 116.5);
vertex(99.2, 100.7);
vertex(100.1, 100.8);
vertex(98.2, 115.6);
endShape();
beginShape();
vertex(100.2, 100);
vertex(99.3, 99.9);
vertex(100.1, 94.5);
vertex(100.9, 94.7);
vertex(100.2, 100);
endShape();
beginShape();
vertex(100.3, 93.6);
vertex(101.2, 87.5);
vertex(101.8, 87.7);
vertex(101, 93.8);
vertex(100.3, 93.6);
endShape();
beginShape();
vertex(101.1, 100.1);
vertex(101.8, 94.8);
vertex(114, 97.2);
vertex(114.1, 101.5);
vertex(101.1, 100.1);
endShape();
      popMatrix();
      break;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 1:
      pushMatrix();
      rectMode(CENTER);
      translate(840, 360);
      noStroke();
fill(167, 109, 61);
beginShape();
vertex(32.1, 0);
vertex(0, 88.5);
vertex(151.7, 113.6);
endShape(CLOSE);
fill(255, 255, 0);
ellipse(35.2, 93.5, 31.3, 31.5);
fill(255, 255, 255);
ellipse(35.6, 93.9, 26.3, 26.4);
fill(3, 2, 1);
ellipse(35.5, 93.8, 8.6, 8.6);
ellipse(10.2, 119.6, 3.4, 3.4);
noFill();
stroke(0, 0, 0);
strokeWeight(2);
line(19.3, 108.5, 36.5, 131.7);
      popMatrix();
      break;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 2:
      pushMatrix();
      rectMode(CENTER);
      translate(840, 360);
      noStroke();
fill(170, 15, 2);
beginShape();
vertex(70, 104.1);
vertex(60, 109.3);
vertex(0, 109.3);
vertex(59.6, 0);
vertex(59.6, 103.7);
endShape(CLOSE);
fill(0, 10, 30);
beginShape();
vertex(24.6, 169.3);
bezierVertex(24.6, 169.3, 38.4, 149.9, 66.5, 149.9);
bezierVertex(94.6, 149.9, 105.8, 168.5, 105.8, 168.5);
bezierVertex(105.8, 168.5, 100.2, 138.7, 66.1, 138.7);
bezierVertex(32, 138.7, 24.6, 169.3, 24.6, 169.3);
endShape();
fill(255, 103, 0);
beginShape();
vertex(22.5, 114);
vertex(111, 114);
vertex(66.1, 158.9);
endShape(CLOSE);
fill(2, 1, 3);
beginShape();
vertex(78.8, 97.2);
vertex(97.2, 97.2);
vertex(88.8, 112.9);
endShape(CLOSE);
fill(255, 190, 0);
rect(60.5, 87.2, 47.5, 4.1);
fill(217, 27, 2);
beginShape();
vertex(22, 40.6);
vertex(29.2, 25.3);
vertex(14.3, 18.8);
vertex(7.3, 33.5);
endShape(CLOSE);
      popMatrix();
      break;
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 3:
      pushMatrix();
      rectMode(CENTER);
      translate(840, 360);
      noStroke();
fill(8, 23, 47);
beginShape();
vertex(48, 64);
vertex(24.3, 160.7);
vertex(70.3, 160.7);
endShape(CLOSE);
noFill();
stroke(213, 206, 160);
strokeWeight(6);
ellipse(47.5, 59.5, 28.2, 28.2);
fill(42, 42, 69);
noStroke();
beginShape();
vertex(6.3, 0);
vertex(91, 0);
vertex(48, 64);
vertex(6.3, 0);
endShape();
fill(0, 103, 141);
ellipse(47.7, 60, 17.3, 17.3);
noFill();
stroke(80, 178, 211);
strokeWeight(6);
ellipse(48, 59.7, 45, 45);
      popMatrix();
      break;
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      case 4:
      pushMatrix();
      rectMode(CENTER);
      translate(840, 360);
      noStroke();
fill(35, 185, 205);
beginShape();
vertex(50.2, 32.1);
vertex(30.1, 52.5);
vertex(76.7, 138.3);
vertex(98.4, 130.8);
endShape(CLOSE);
fill(249, 30, 28);
ellipse(60.4, 81.6, 23.7, 23.7);
fill(255, 81, 32);
beginShape();
vertex(118.5, 81.6);
bezierVertex(118.5, 72.1, 110.8, 64.4, 101.3, 64.4);
bezierVertex(91.8, 64.4, 84.1, 72.1, 84.1, 81.6);
endShape();
beginShape();
vertex(36.6, 81.6);
bezierVertex(36.6, 72.1, 28.9, 64.4, 19.4, 64.4);
bezierVertex(9.9, 64.4, 2.3, 72.2, 2.3, 81.6);
endShape();
fill(253, 190, 0);
beginShape();
vertex(60.4, 81.6);
bezierVertex(60.4, 75.1, 55.1, 69.8, 48.6, 69.8);
bezierVertex(42.1, 69.8, 36.8, 75.1, 36.8, 81.6);
endShape();
beginShape();
vertex(84, 81.6);
bezierVertex(84, 75.1, 78.7, 69.8, 72.2, 69.8);
bezierVertex(65.7, 69.8, 60.4, 75.1, 60.4, 81.6);
endShape();
noFill();
stroke(234, 85, 74);
strokeWeight(9);
beginShape();
vertex(3.4, 42.9);
bezierVertex(16.5, 28.1, 35.7, 18.7, 57.1, 18.7);
bezierVertex(96.7, 18.7, 128.9, 50.8, 128.9, 90.5);
bezierVertex(128.9, 119.5, 111.7, 144.4, 87, 155.7);
endShape();
      popMatrix();
      break;
      }  
  }
} 

Personajevirus pv1;
Personajevirus pv2;
Personajevirus pv3;
Personajevirus pv4;
Personajevirus pv5;

Personajevirus pv1b;
Personajevirus pv2b;
Personajevirus pv3b;
Personajevirus pv4b;
Personajevirus pv5b;

Personajevirus j1;
Personajevirus j2;

void setup() {
  size(1280, 720);
//Para el jugador 1:
  pv1 = new Personajevirus("GLaDOS", 20, 1, 0);
  pv2 = new Personajevirus("Inky", 20, 1, 1);
  pv3 = new Personajevirus("Creeper", 20, 1, 2);
  pv4 = new Personajevirus("Covenant", 20, 1, 3);
  pv5 = new Personajevirus("Reapers", 20, 1, 4);
//Para el jugador 1: 
  pv1b = new Personajevirus("GLaDOS", 20, 1, 0);
  pv2b = new Personajevirus("Inky", 20, 1, 1);
  pv3b = new Personajevirus("Creeper", 20, 1, 2);
  pv4b = new Personajevirus("Covenant", 20, 1, 3);
  pv5b = new Personajevirus("Reapers", 20, 1, 4);
}
void draw() {
  switch(screen) {
  case 0:
    intro();
    break;
  case 2:
    seleccion();
    break;
  case 3:
    juego();
    break;
  case 4:
    fin();
    break;
  } 
  println(screen);
}
//pantalla de inicio
void intro() {
  background(#000000);
fill(#96FF05);
textSize(22);
textAlign(CENTER,CENTER);
text("Varios tecno-virus intentan obtener el liderazgo a toda costa ",650,300);
textSize(22);
textAlign(CENTER,CENTER);
text("El ganador tendra el control absoluto del huesped, preparen sus peleadores y comiencen!!",650,400);
  pushMatrix();
  textSize(42);
  textAlign(CENTER,CENTER);
  fill(random(0, 100));
  text("Presiona la pantalla para comenzar", 650, 550);
  popMatrix();
  if (mousePressed) {
    screen = 2;
  }
}

//pantalla de selección 
void seleccion() {
  background(#000000);
  pv1.display();
  pv2.display();
  pv3.display();
  pv4.display();
  pv5.display();

  if (seleccionjugador1 && seleccionjugador2) {
    screen = 3;
    turn += 1;
  }
  if (keyPressed) {
    switch(key) {
    case 'q':
      j1 = pv1;
      energia1=j1.hp;
      seleccionjugador1 = true;
      break;
    case 'w':
      j1 = pv2;
      energia1=j1.hp;
      seleccionjugador1 = true;
      break;
    case 'e':
      j1 = pv3;
      energia1=j1.hp;
      seleccionjugador1 = true;
      break;
    case 'r':
      j1 = pv4;
      energia1=j1.hp;
      seleccionjugador1 = true;
      break;
    case 't':
      j1 = pv5;
      energia1=j1.hp;
      seleccionjugador1 = true;
      break;
    case 'a':
      j2 = pv1b;
      energia2=j2.hp;
      seleccionjugador2 = true;
      break;
    case 's':
      j2 = pv2b;
      energia2=j2.hp;
      seleccionjugador2 = true;
      break;
    case 'd':
      j2 = pv3b;
      energia2=j2.hp;
      seleccionjugador2 = true;
      break;
    case 'f':
      j2 = pv4b;
      energia2=j2.hp;
      seleccionjugador2 = true;
      break; 
    case 'g':
      j2 = pv5b;
      energia2=j2.hp;
      seleccionjugador2 = true;
      break;
    }
  }
  pushMatrix();
  textSize(30);
  fill(#96FF05);
  stroke(0);
  String s = "Jugador 1 escoge con Q, W, E, R, o T";
  text(s, 600, 300, 700, 200); 
  popMatrix();
  
  pushMatrix();
  textSize(30);
  fill(#96FF05);
  stroke(0);
  String s1 = "Jugador 2 escoge con A, S, D, F, o G";
  text(s1, 600, 440, 700, 200); 
  popMatrix();
}
//pantalla batalla
void juego() {
  background(#000000);
  
//jugador 1:
  if (j1==pv1) {
    seleccionado=0;
    pv1.jugando();
  }
  if (j1==pv2) {
    seleccionado=1;
    pv2.jugando();
  }
  if (j1==pv3) {
    seleccionado=2;
    pv3.jugando();
  }
  if (j1==pv4) {
    seleccionado=3;
    pv4.jugando();
  }
  if (j1==pv5) {
    seleccionado=4;
    pv5.jugando();
  }
  
  //Jugador 2:
  if (j2==pv1b) {
    pv2seleccionado=0;
    pv1.pv2jugando();
  }
  if (j2==pv2b) {
    pv2seleccionado=1;
    pv2.pv2jugando();
  }
  if (j2==pv3b) {
    pv2seleccionado=2;
    pv3.pv2jugando();
  }
  if (j2==pv4b) {
    pv2seleccionado=3;
    pv4.pv2jugando();
  }
  if (j2==pv5b) {
    pv2seleccionado=4;
    pv5.pv2jugando();
  }
 
  println(j1.nombre + ","+energia1+ ",");
  println(j2.nombre + ","+energia2+ ",");
 
  switch (turn) {
  case 1: 
    keyPressed();
    if ((key=='x') || (key == 'X') ) {
      energia2 -= j1.ataque;
      turn = 2;
    }
    break;
  case 2:
    keyPressed();
    if ((key=='m') || (key == 'M') ) {
      energia1 -= j2.ataque;
      turn = 1;
    }
    break;
  }
  pushMatrix();
  fill(random(0, 255), random (0, 255), random (0, 255));
  //Jugador 1
  rect(400, 50, (energia1 *20), 40);
  popMatrix();
  //Jugador 2
  pushMatrix();
  fill(random(0, 255), random (0, 255), random (0, 255));
  rect(900, 50, (energia2*20), 40);
  popMatrix();
   if (energia1 <= 0 || energia2<=0) {
    screen =4;
  }
  textSize(15);
  fill(#96FF05);
  stroke(0);
  String s3 = "Jugador uno ataca con X";
  text(s3, 200, 400, 600, 200); 
  
  textSize(15);
  fill(#96FF05);
  stroke(0);
  String s4 = "Jugador dos ataca con M";
  text(s4, 1150, 400, 600, 200); 
}
//pantalla final
void fin() {
  background(#000000);
  textSize(22);
  fill(#96FF05);
  stroke(0);
  String s3 = "Toca la pantalla para una partida nueva";
  text(s3, 410, 410, 600, 200); 
  if (mousePressed) {
    screen = 0;
    seleccionjugador1 = false;
    seleccionjugador2 = false;
    turn = 0;
    energia1 = 0;
    energia2= 0;
  }
}
